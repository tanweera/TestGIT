<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:context="http://www.springframework.org/schema/context" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd">
    
    <choice-exception-strategy name="ChoiceExceptionStrategy">
        <catch-exception-strategy when="#[exception.causeMatches('org.mule.module.apikit.exception.InvalidHeaderException') ]" doc:name="Validation Catch Exception Strategy">
            <set-variable variableName="statusCode" value="400" doc:name="statusCode"/>
            <logger message="test message" level="INFO" doc:name="Logger"/>
            <set-variable variableName="exceptionCode" value="#[exception.cause.message]" doc:name="exceptionCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
         <catch-exception-strategy when="#[exception.causeMatches('org.mule.extension.validation.api.MultipleValidationException') ]" doc:name="Validation Munit Catch Exception Strategy">
            <set-variable variableName="statusCode" value="400" doc:name="statusCode"/>
            <logger message="test message" level="INFO" doc:name="Logger"/>
            <set-variable variableName="exceptionCode" value="#[exception.cause.message]" doc:name="exceptionCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('org.mule.module.json.validation.*')]" doc:name="Json Validation Catch Exception Strategy">
            <set-variable variableName="statusCode" value="400" doc:name="statusCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('org.mule.module.http.internal.request*')]" doc:name="Http RESTCall Exception">
            <set-property propertyName="http.status" value="#[message.inboundProperties.'http.status']" doc:name="Set Http Status"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('com.sprint.lib.error.handling.framework.GeneralException')]" doc:name="Custom General Exception Strategy">
            <set-variable variableName="statusCode" value="500" doc:name="statusCode"/>
            <set-variable variableName="exceptionCode" value="#[exception.cause.message.substring(exception.cause.message.lastIndexOf(':')+1)]" doc:name="exceptionCode-Update"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('org.mule.module.ws.consumer.SoapFaultException')]" doc:name="Custom SOAP Exception Strategy">
            <logger message="['Entering --------Soap Exception Strategy-----------']" level="INFO" doc:name="Logger"/>
            <set-variable variableName="statusCode" value="500" doc:name="statusCode"/>
            <mulexml:dom-to-xml-transformer doc:name="DOM to XML"/>
            <dw:transform-message metadata:id="0781f3aa-5c7b-4a86-80d8-12dff4cdcf95" doc:name="construct faultResponse">
                <dw:input-payload doc:sample="detail.xml"/>
                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://integration.sprint.com/common/ErrorDetailsV2.xsd
---
{
code: "400",
errors: payload.detail.errorDetailItem.*providerError map {
			code: $.providerErrorCode,
			description: $.providerErrorText	
}
} ]]></dw:set-payload>
                <dw:set-variable variableName="test"><![CDATA[%dw 1.0
%output application/json
%namespace ns0 http://integration.sprint.com/common/ErrorDetailsV2.xsd
---
{
code: "400",
errors: payload.detail.errorDetailItem.*providerError map {
			code: $.providerErrorCode,
			description: $.providerErrorText	
}
} ]]></dw:set-variable>
            </dw:transform-message>
            <logger message="['After --------Soap Exception Strategy construct Fault Response-----------']" level="INFO" doc:name="Logger"/>
            <flow-ref name="commonHttpErrorFlow" doc:name="commonHttpErrorFlow"/>

           <!--  <flow-ref name="ErrorsFlow" doc:name="ErrorsFlow"/> -->
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('org.mule.module.apikit.exception.NotFoundException')]" doc:name="404">
            <logger message="Inside method not allowed:::" level="INFO" doc:name="Logger"/>
            <set-variable variableName="statusCode" value="404" doc:name="statusCode"/>
            <set-variable variableName="exceptionCode" value="http.resourcenotfound" doc:name="exceptionCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('org.mule.module.apikit.exception.MethodNotAllowedException')]" doc:name="405">
            <set-variable variableName="statusCode" value="405" doc:name="statusCode"/>
            <set-variable variableName="exceptionCode" value="http.methodnotallowed" doc:name="exceptionCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('org.mule.module.apikit.exception.UnsupportedMediaTypeException')]" doc:name="415">
            <set-variable variableName="statusCode" value="415" doc:name="statusCode"/>
            <set-variable variableName="exceptionCode" value="http.unspportedmediatype" doc:name="exceptionCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('org.mule.module.apikit.exception.NotAcceptableException')]" doc:name="406">
            <set-variable variableName="statusCode" value="406" doc:name="statusCode"/>
            <set-variable variableName="exceptionCode" value="http.notacceptable" doc:name="exceptionCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('org.mule.module.apikit.exception.InvalidQueryParameterException')]" doc:name="400 - InvalidQueryParameterException">
            <logger message="Inside invalidqueryparameter Exception" level="INFO" doc:name="Logger"/>
            <set-variable variableName="statusCode" value="400" doc:name="statusCode"/>
            <logger message="Exception code:: #[exception.cause.message]" level="INFO" doc:name="Logger"/>
            <set-variable variableName="exceptionCode" value="#[exception.cause.message]" doc:name="exceptionCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('org.mule.module.apikit.exception.InvalidUriParameterException')]" doc:name="400 - InvalidUriParameterException">
            <logger message="Inside invalidqueryparameter Exception" level="INFO" doc:name="Logger"/>
            <set-variable variableName="statusCode" value="400" doc:name="statusCode"/>
            <logger message="Exception code:: #[exception.cause.message]" level="INFO" doc:name="Logger"/>
            <set-variable variableName="exceptionCode" value="#[exception.cause.message]" doc:name="exceptionCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('com.mulesoft.weave.mule.exception.WeaveExecutionException')]" doc:name="400 - DataWeaveException">
            <logger message="Inside DataWeave Exception" level="INFO" doc:name="Logger"/>
            <set-variable variableName="statusCode" value="400" doc:name="statusCode"/>
            <logger message="Exception code:: #[exception.cause.message]" level="INFO" doc:name="Logger"/>
            <set-variable variableName="exceptionCode" value="#[exception.cause.message]" doc:name="exceptionCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
        <catch-exception-strategy when="#[exception.causeMatches('org.mule.module.apikit.exception.BadRequestException')]" doc:name="400 - BadRequestException">
            <set-variable variableName="statusCode" value="400" doc:name="statusCode"/>
            <set-variable variableName="exceptionCode" value="http.badrequest" doc:name="exceptionCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
        
          <catch-exception-strategy when="#[exception.causeMatches('org.mule.api.MessagingException')]" doc:name="504">
            <logger message="'------Inside Messaging Exception--------'+#[exception.cause.message]" level="INFO" doc:name="Logger"/>
            <set-variable variableName="statusCode" value="504" doc:name="statusCode"/>
            <logger message="Index Value::#[exception.cause.message.split(&quot;:&quot;)[1].trim()]" level="INFO" doc:name="Logger"/>
            <set-variable variableName="exceptionCode" value="#[exception.cause.message.split(&quot;:&quot;)[1].trim()]" doc:name="exceptionCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
        
        
        
        <catch-exception-strategy doc:name="Other Catch Exception Strategy">
            <logger level="INFO" doc:name="Logger" message="test================#[exception.cause]"/>
            <set-variable variableName="statusCode" value="500" doc:name="statusCode"/>
            <set-variable variableName="exceptionCode" value="#[new String(org.mule.util.ExceptionUtils.getRootCauseMessage(exception))]" doc:name="exceptionCode"/>
            <flow-ref name="errorSubFlow" doc:name="errorSubFlow"/>
        </catch-exception-strategy>
    </choice-exception-strategy>
    <sub-flow name="errorSubFlow">
        <set-variable variableName="propertyFilename" value="${property.filename}" doc:name="property-filename"/>
        <logger message="test==============#[?flowVars.exceptionCode == null]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[?flowVars.exceptionCode == null]">
                <set-variable variableName="exceptionCode" value="#[exception.cause.message]" doc:name="exceptionCode"/>
                <logger message="test........=========#[flowVars.exceptionCode]" level="INFO" doc:name="Logger"/>
            </when>
            <otherwise>
                <logger message="exceptionCode is already set #[flowVars.exceptionCode]" level="DEBUG"  doc:name="Logger" category="com.sprint.lib.error.handling.framework.errorsubflow"/>
            </otherwise>
        </choice>
         <dw:transform-message doc:name="Form Error json">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json

---
using (tempCode = lookup("fetchValueExceptionCode", flowVars.exceptionCode))
{
	code: flowVars.statusCode when (flowVars.statusCode == '400') otherwise (flowVars.statusCode when (tempCode != null) otherwise 'other.code'),
	errors: [ {
			code: flowVars.statusCode when (flowVars.statusCode == '400') otherwise (flowVars.statusCode when (tempCode != null) otherwise 'other.code'), 
			description: flowVars.exceptionCode when (flowVars.statusCode == '400') otherwise (tempCode when (tempCode !=null) otherwise p('other.code'))
			}
			]
}]]></dw:set-payload>
        </dw:transform-message>

        <flow-ref name="commonHttpErrorFlow" doc:name="commonHttpErrorFlow"/>
    </sub-flow>
    <flow name="commonHttpErrorFlow">
        <json:validate-schema schemaLocation="schemas/error/internal_errors.json" doc:name="Validate Error JSON Schema"/>
        <json:json-to-object-transformer returnClass="java.util.Map" doc:name="JSON to Object"/>
       <!--  <scripting:transformer doc:name="Groovy">
            <scripting:script engine="Groovy"><![CDATA[import static org.codehaus.groovy.control.ResolveVisitor.DEFAULT_IMPORTS
Map inputMap = flowVars['jsonErrorMap']
Iterator inputItr = inputMap.entrySet().iterator();
    while (inputItr.hasNext()) {
        Map.Entry input = (Map.Entry)inputItr.next();
        if(input.getKey().equalsIgnoreCase("code")){
         	flowVars['code'] = input.getValue()
         	println(flowVars['code'])
         }
         if(input.getKey().equalsIgnoreCase("errors")){
         	flowVars['errorsMap']= input.getValue()
         	println(flowVars['errorsMap'])
         }
    }
]]></scripting:script>
        </scripting:transformer> -->
        <set-property propertyName="http.status" value="#[message.payload.code]" doc:name="Set Http Status"/>
        <set-variable variableName="errorVariable" value="#[message.payload.errors]" doc:name="errorVariable"/>
        <choice doc:name="Redirect to Error 400 or 500">
            <when expression="#[message.payload.code == 400]">
                <dw:transform-message metadata:id="8308748e-d8a8-4aa8-9efe-25e623252b76" doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
flowVars.errorVariable]]></dw:set-payload>
                </dw:transform-message>
               <!--  <set-payload value="#[flowVars.errorsMap]" doc:name="Set Error Payload"/>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
                 --><json:validate-schema schemaLocation="schemas/error/errors.json" doc:name="Validate JSON Error against Schema"/>
            </when>
            <otherwise>
                <dw:transform-message doc:name="Transform to Error Structure" metadata:id="d362d60f-6bfa-4d7b-a3cc-3ce5ec23cb9f">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
flowVars.errorVariable[0]]]></dw:set-payload>
                </dw:transform-message>
                <json:validate-schema schemaLocation="schemas/error/error.json" doc:name="Validate JSON Schema"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="fetchValueExceptionCode">
        <scripting:transformer doc:name="Fetch exceptionCode Value">
        
            <scripting:script engine="Groovy">
         
            <![CDATA[
           InputStream fileIn=Thread.currentThread().getContextClassLoader().getResourceAsStream('common-error.properties')
            Properties properties = new Properties()
			properties.load(fileIn)
			def exceptionCode= flowVars.exceptionCode.trim()
			def valueExceptioncode= properties."$exceptionCode"
			return valueExceptioncode]]></scripting:script>
        </scripting:transformer>
    </flow>
</mule>
